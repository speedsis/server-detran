 

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Empresa {
  id                        String                      @id @default(cuid()) @map("_id")
  nome                      String
  cnpj                      String
  razaoSocial               String? 
  fone                      String?
  email                     String?
  celular                   String?
  nomeContador              String?
  foneContador              String?
  emailContador             String?
  website                   String?
  logo                      String?
  nomeResponsavel           String?
  foneResponsavel           String?
  secretario                String?
  foneSecretario            String?
  emailSecretario           String?
  nomeGestor                String?
  foneGestor                String?
  emailGestor               String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt 
  Notification              Notification[]
}

model Ocorrencia {
  id                       String                    @id @default(cuid()) @map("_id")
  pesid                    String  
  data_inversa             DateTime
  dia_semana               String
  horario                  String
  uf                       String
  br                       String
  municipio                String
  causa_principal          String
  causa_acidente           String
  ordem_tipo_acidente      String
  tipo_acidente            String
  classificacao_acidente   String
  fase_dia                 String   
  sentido_via              String
  condicao_metereologica   String
  tipo_pista               String
  tracado_via              String
  uso_solo                 String
  id_veiculo               String   
  tipo_veiculo             String   
  marca                    String   
  ano_fabricacao_veiculo   Int      
  tipo_envolvido           String  
  estado_fisico            String
  idade                    String
  sexo                     String   
  ilesos                   String
  feridos_leves            String
  feridos_graves           String
  mortos                   String
  latitude                 Float    
  longitude                Float    
  regional                 String
  delegacia                String
  uop                      String
}



model Servidor {
  id                      String                    @id @default(cuid()) @map("_id")
  nome                    String
  matricula               String
  matriculaAnterior       String? 
  cpf                     String
  rg                      String?
  emissorRg               String?
  dtemissaoRg             DateTime?
  ufRg                    String? 
  dtNascimento            DateTime? 
  estadoCivil             String? //Novo
  sexo                    String? //Novo 
  nacionalidade           String? //Novo 
  email                   String? //Novo
  celular                 String? //Novo
  telefone                String? //Novo
  endereco                String? //Novo
  numero                  String? //Novo
  complemento             String? //Novo
  bairro                  String? //Novo
  cidade                  String? //Novo
  uf                      String? //Novo
  cep                     String? //Novo  
  Notification                Notification[] 
  @@unique([cpf])
  @@index([matricula, cpf])
}
 

model PerfilAcesso {
  id        String   @id @default(cuid()) @map("_id")
  descricao String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model AuditLog {
  id             String   @id @default(cuid()) @map("_id")
  userCpf        String?
  servidorCpf    String?
  matricula      String?
  orgaoId        String? 
  empresaId      String
  executorId     String?
  consignacaoId  String?
  portal         String?
  tela           String?
  addressIP      String?
  ADE            String?
  mensagem       String?
  action         Json
  createdAt      DateTime @default(now())
  translationKey String?
}

model LogSolicitacoesLiberacao {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  idProcesso           String?
  origemMovimento      String?
  chavePesquisa        String?
  idUsuarioSolicitante String?
  idEmpresa            String?
  dtHoraSolicitacao    DateTime @default(now())
  idUsuarioLiberacao   String?
  tipoSituacao         String?
  texto                String?
  mensagemRetorno      String?

  @@unique([idProcesso, idEmpresa], name: "unique_solicitacao")
}

model User {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  username             String
  firstName            String?
  lastName             String?
  email                String?
  emailAlternativo     String?
  password             String? 
  consignatariaId      String 
  dtNascimento         DateTime?
  cpf                  String?
  rank                 Rank             @default(USER)
  banned               Boolean?         @default(false)
  banReason            String?
  cargo                String? 
  whitelistStatus      WhitelistStatus? @default(PENDING)
  fone                 String?
  ramal                String?
  fone2                String?
  ramal2               String?
  celular              String?
  ipfixo               String?
  perfilAcesso         PerfilAcesso[]
  permissions          String[] 
  correspondenteId     String?
  acessoAtivo          Boolean?         @default(false)
  avatarUrl            String?
  apiToken             ApiToken?        @relation(fields: [apiTokenId], references: [id])
  apiTokenId           String?
  roles                CustoRoleUser[]
  sessions             UserSession[]
  isDarkTheme          Boolean?         @default(true)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now()) @updatedAt
  Note                 Note[]
  // AuditLog             AuditLog[]
  notifications        Notification[]

  @@unique([email])
}

 

model ApiToken {
  id      String   @id @default(cuid()) @map("_id")
  enabled Boolean  @default(false)
  token   String?
  // empty = *
  routes  String[]

  uses      Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  logs      ApiTokenLog[]
  User      User[]
}

model ApiTokenLog {
  id         String   @id @default(cuid()) @map("_id")
  apiToken   ApiToken @relation(fields: [apiTokenId], references: [id], onDelete: Cascade)
  apiTokenId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  statusCode String?
  route      String?
  method     String?
}

enum Rank {
  OWNER
  ADMIN
  USER
}

model CustomRole {
  id            String          @id @default(cuid()) @map("_id")
  name          String          @unique
  iconId        String?
  permissions   String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  discordRoleId String?
  User          CustoRoleUser[]
}

model CustoRoleUser {
  id          String     @id @default(cuid()) @map("_id")
  CustomRole  CustomRole @relation(fields: [custoRoleId], references: [id], onDelete: Cascade)
  custoRoleId String
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  assignedAt  DateTime   @default(now())
  assignedBy  String
}

model UserSession {
  id           String   @id @default(cuid()) @map("_id")
  refreshToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

// notifications
model Notification {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  Empresa     Empresa?           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  empresaId   String
  Servidor    Servidor?          @relation(fields: [servidorId], references: [id], onDelete: Cascade)
  servidorId  String
  title       String?
  description String?
  status      NotificatioStatus? @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
  User        User?              @relation(fields: [userId], references: [id])
  userId      String?            @db.ObjectId
}

model Note {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  empresaId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String?
}

enum WhitelistStatus {
  ACCEPTED
  PENDING
  DECLINED
}

enum NotificatioStatus {
  READ
  PENDING
  EXCLUDED
}
