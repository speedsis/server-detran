
// Verificar a existência da Rúbrica
// const rublica = await prisma.rublica.findFirst({
//   where: {
//     codigo: consignacaoData.rublicaId.padStart(5, '0'),
//   },
//   select: {
//     id: true,
//   },
// });

// if (!rublica) {
//   throw new Error(
//     `A rúbrica com código ${consignacaoData.rublicaId} não existe.`,
//   );
// }

//Create consignação
// async criarConsignacaoCargaInicial(data: any): Promise<any> {
//   try {
//     const { empresaId, servidorId, rublicaId, consignatariaId, prisma } =
//       data;
//     const mesReferencia = '03';
//     const anoReferencia = '2024';

//     // Validação dos campos obrigatórios
//     if (!empresaId || !servidorId || !rublicaId || !consignatariaId) {
//       throw new Error(
//         'Os campos empresaId, servidorId, rublicaId e consignatariaId são obrigatórios.',
//       );
//     }

//     // Verificar a existência da Empresa, Servidor e Consignataria
//     await Promise.all([
//       checkEntityExistence('Empresa', { id: empresaId }),
//       checkEntityExistence('Servidor', { id: servidorId }),
//       checkEntityExistence('Consignataria', { id: consignatariaId }),
//     ]);

//     // Verificar a existência da Rúbrica
//     const rublica = await prisma.rublica.findFirst({
//       where: {
//         codigo: rublicaId.padStart(5, '0'),
//       },
//       select: {
//         id: true,
//       },
//     });

//     if (!rublica) {
//       throw new Error(`A rúbrica com código ${consignatariaId} não existe.`);
//     }

//     // Gerar parcelas
//     const parcelas = await this.gerarParcelas(data);

//     // Validar se as parcelas foram geradas
//     if (!parcelas || parcelas.length === 0) {
//       throw new Error('Não foi possível gerar as parcelas referentes.');
//     }

//     // Gerar próximo serial
//     const nextSerial = await gerarProximoSerial(prisma);

//     // Criar a consignação
//     const solicitacaoResult = await prisma.consignacao.create({
//       data: {
//         ...(data as Prisma.ConsignacaoCreateInput),
//         mesReferencia,
//         anoReferencia,
//         status: 'ATIVO',
//         origem: 'IMPORTADO SISTEMA FOLHA RH - OBDOS',
//         enviadoFolha: true,
//         prazoContrato: data.prazoContrato,
//         parcelaContrato: data.parcelaContrato,
//         valorParcela: data.valorParcela,
//         Servidor: { connect: { id: servidorId } },
//         Empresa: { connect: { id: empresaId } },
//         Rublica: { connect: { id: rublica.id } },
//         Consignataria: { connect: { id: consignatariaId } },
//         Parcelas: {
//           create: parcelas.map((parcela) => ({
//             ...parcela,
//             Empresa: { connect: { id: empresaId } },
//             Servidor: { connect: { id: servidorId } },
//             origemmovimento: 'IMPORTADO SISTEMA FOLHA RH - OBDOS',
//             perjurosmora: 0,
//             flagbaixada: parcela.digitotitulo === 0,
//             status: parcela.digitotitulo === 0 ? 'BAIXADA' : 'PENDENTE',
//             idtitulo: nextSerial,
//             // outras propriedades...
//           })),
//         },
//         Historico: {
//           create: {
//             tipo: 'IMPORTACAO_CONSIGNACAO',
//             motivo: 'SISTEMA CONSIGOV',
//             observacao:
//               'Consignação importada do sistema de folha RH - OBDOS',
//           },
//         },
//         Comprovante: {
//           create: {
//             tipo: 'CONSIGNACAO',
//             serial: nextSerial,
//             dataDocumento: new Date(),
//           },
//         },
//       },
//     });

//     return solicitacaoResult;
//   } catch (error) {
//     if (error instanceof ValidationError) {
//       handleValidationError(error);
//     } else if (error instanceof Prisma.PrismaClientKnownRequestError) {
//       handlePrismaError(error);
//     } else {
//       handleGenericError(error);
//     }
//   }
// }


  // async obterMesReferencia(diaReferencia) {
  //   return new Promise((resolve, reject) => {
  //     if (diaReferencia <= 12) {
  //       const mesReferencia = getCurrentMonth().month;
  //       resolve(mesReferencia);
  //     } else {
  //       const mesReferencia = getCurrentMonth(true).month;
  //       resolve(mesReferencia);
  //     }
  //   });
  // }

  // async obterAnoReferencia(diaReferencia) {
  //   return new Promise((resolve, reject) => {
  //     if (diaReferencia <= 12) {
  //       const mesReferencia = getCurrentMonth().year;
  //       resolve(mesReferencia);
  //     } else {
  //       const mesReferencia = getCurrentMonth(true).year;
  //       resolve(mesReferencia);
  //     }
  //   });
  // }




  // async processarContrato(data: CargaInicialDetalhe[]): Promise<string> {
  //   const batchSize = 50;
  //   const totalLinhas = data.length;
  //   let registrosProcessados = 0;
  //   let errosProcessamento: string[] = [];

  //   try {
  //     await this.prismaService.$transaction(async (prisma) => {
  //       for (
  //         let startIndex = 0;
  //         startIndex < totalLinhas;
  //         startIndex += batchSize
  //       ) {
  //         const endIndex = Math.min(startIndex + batchSize, totalLinhas);
  //         const lote = data.slice(startIndex, endIndex);

  //         registrosProcessados = endIndex;
  //         console.log('Lote:', registrosProcessados);

  //         const errosLote = await this.createContratoBatch(
  //           lote,
  //           prisma as PrismaClient,
  //         );
  //         errosProcessamento = errosProcessamento.concat(errosLote);
  //       }
  //     });

  //     const resultadoFinal = `Processamento concluído. ${registrosProcessados} registros processados com sucesso.`;

  //     if (errosProcessamento.length > 0) {
  //       const erroMessage =
  //         resultadoFinal +
  //         `\nErros encontrados:\n${errosProcessamento.join('\n')}`;
  //       console.error(erroMessage);
  //       throw new Error(erroMessage);
  //     } else {
  //       return resultadoFinal;
  //     }
  //   } catch (error) {
  //     console.error(`Erro durante a execução: ${error.message}`);
  //     throw error;
  //   }
  // }

  // private async createContratoBatch(
  //   lote: CargaInicialDetalhe[],
  //   prisma: PrismaClient,
  // ): Promise<string[]> {
  //   interface Parcelas {
  //     valtitulo: number;
  //     mesReferencia: number;
  //     anoReferencia: number;
  //     digitotitulo: number;
  //   }

  //   const empresaId = 'cltghrgx9000112nk3akgv01d';

  //   const nextSerial = await this.gerarProximoSerial();

  //   const errors: string[] = [];

  //   try {
  //     await prisma.$transaction(async (prismaTransaction) => {
  //       const promises = lote.map(async (base) => {
  //         console.log('Contrato: inicio validação');

  //         const {
  //           id,
  //           secretariaId,
  //           orgaoId,
  //           nroadf,
  //           dtVct1parcela,
  //           dtCadastro,
  //           ...newBase
  //         } = base;

  //         const { servidorId, consignacaoId, consignatariaId } = newBase;

  //         const rublica = await prismaTransaction.rublica.findFirst({
  //           where: {
  //             codigo: consignacaoId.padStart(5, '0'),
  //           },
  //           select: {
  //             id: true,
  //           },
  //         });

  //         if (!rublica) {
  //           throw new Error(
  //             `A rúbrica com código ${consignacaoId} não existe.`,
  //           );
  //         }
  //         // let parcelas: Parcelas[] = [];

  //         // if (
  //         //   newBase.valorParcela > 0 &&
  //         //   newBase.prazoContrato > newBase.parcelaContrato
  //         // ) {
  //         //   parcelas = await parcelarValor({
  //         //     valor: newBase.valorParcela,
  //         //     numeroParcelas: newBase.prazoContrato - newBase.parcelaContrato,
  //         //   });

  //         //   if (!parcelas || parcelas.length === 0) {
  //         //     throw new Error(
  //         //       `Não foi possível gerar as parcelas referentes. ${newBase.valorParcela} - ${newBase.prazoContrato} - ${newBase.parcelaContrato} - ${newBase.nomeServidor}`,
  //         //     );
  //         //   }
  //         // } else {
  //         //   parcelas.push({
  //         //     valtitulo: newBase.valorParcela,
  //         //     mesReferencia: 3,
  //         //     anoReferencia: 2024,
  //         //     digitotitulo: 0,
  //         //   });
  //         // }

  //         try {
  //           await prisma.consignacao.create({
  //             data: {
  //               status: 'ATIVO',
  //               origem: 'IMPORTADO SISTEMA FOLHA RH - OBDOS',
  //               enviadoFolha: true,
  //               prazoContrato: newBase.prazoContrato,
  //               parcelaContrato: newBase.parcelaContrato,
  //               valorParcela: newBase.valorParcela,
  //               Servidor: { connect: { id: servidorId } },
  //               Empresa: { connect: { id: empresaId } },
  //               Rublica: { connect: { id: rublica.id } },
  //               Consignataria: { connect: { id: consignatariaId } },
  //               // Parcelas: {
  //               //   create: parcelas.map((parcela) => ({
  //               //     valtitulo: parcela.valtitulo,
  //               //     mesReferencia: parcela.mesReferencia,
  //               //     anoReferencia: parcela.anoReferencia,
  //               //     digitotitulo: parcela.digitotitulo,
  //               //     Empresa: {
  //               //       connect: {
  //               //         id: empresaId,
  //               //       },
  //               //     },
  //               //     Servidor: {
  //               //       connect: {
  //               //         id: servidorId,
  //               //       },
  //               //     },
  //               //     obstitulo: 'IMPORTADO SISTEMA FOLHA RH - OBDOS',
  //               //     perjurosmora: 0,
  //               //     flagbaixada: parcela.digitotitulo == 0 ? true : false,
  //               //     status: parcela.digitotitulo == 0 ? 'BAIXADA' : 'PENDENTE',
  //               //     idtitulo: nextSerial,
  //               //   })),
  //               // },
  //               // Historico: [
  //               //   {
  //               //     create: {
  //               //       tipo: 'IMPORTACAO_CONSIGNACAO',
  //               //       motivo: 'SISTEMA CONSIGOV',
  //               //       observacao: 'Consignação importado sistema folha RH - OBDOS',
  //               //     },
  //               //   },
  //               // ],
  //               // Comprovante: [
  //               //   {
  //               //     create: {
  //               //       tipo: 'CONSIGNACAO',
  //               //       serial: nextSerial,
  //               //       dataDocumento: new Date(),
  //               //     },
  //               //   },
  //               // ],
  //             },
  //           });
  //         } catch (validationError) {
  //           if (validationError instanceof ZodError) {
  //             const errorMessage = `Erro de validação para um contrato: ${validationError.errors}`;
  //             console.error(errorMessage);
  //             errors.push(errorMessage);
  //           } else {
  //             const errorMessage = `Erro desconhecido durante a validação: ${validationError.message}`;
  //             console.error(errorMessage);
  //             errors.push(errorMessage);
  //             throw errorMessage; // Reject the transaction if an unknown error occurs
  //           }
  //         }
  //       });

  //       await Promise.all(promises);
  //     });
  //   } catch (error) {
  //     console.error(`Erro durante a execução: ${error.message}`);
  //     throw error;
  //   }

  //   return errors;
  // }


  // async validateContratoServidor(servidorId: string): Promise<boolean> {
  //   return this.validateField(servidorId, this.prismaService.servidor);
  // }

  // async validateContratoEmpresa(empresaId: string): Promise<boolean> {
  //   return this.validateField(empresaId, this.prismaService.empresa);
  // }

  // async validateContratoRublica(consignacaoId: string): Promise<boolean> {
  //   return this.validateCodigoField(consignacaoId, this.prismaService.rublica);
  // }

  // async validateContratoConsignataria(
  //   consignatariaId: string,
  // ): Promise<boolean> {
  //   return this.validateCodigoField(
  //     consignatariaId,
  //     this.prismaService.consignataria,
  //   );
  // }

  // private async validateCodigoField(
  //   value: string,
  //   schema: any,
  // ): Promise<boolean> {
  //   try {
  //     // Realize a validação usando o esquema fornecido
  //     await schema.parseAsync({ codigo: value });
  //     return true;
  //   } catch (error) {
  //     if (error instanceof ZodError) {
  //       // Lide com o erro de validação conforme necessário
  //       console.error(`Erro de validação: ${value} -  ${error.errors}`);
  //     }
  //     return false;
  //   }
  // }

  // private async validateField(value: string, schema: any): Promise<boolean> {
  //   try {
  //     // Realize a validação usando o esquema fornecido
  //     await schema.parseAsync({ id: value });
  //     return true;
  //   } catch (error) {
  //     if (error instanceof ZodError) {
  //       // Lide com o erro de validação conforme necessário
  //       console.error(`Erro de validação:  ${value} - ${error.errors}`);
  //     }
  //     return false;
  //   }
  // }



// async validateAnomalias(filtro: any): Promise<string[]> {
//   const {
//     empresaId,
//     valor_parcela,
//     valor_negativo,
//     parcelaContrato,
//     prazo_contrato,
//   } = filtro;

//   const cargaInicial = await this.prismaService.cargaInicial.findFirst({
//     where: {
//       empresaId: empresaId,
//     },
//     include: {
//       CargaInicialDetalhe: true,
//     },
//   });

//   if (cargaInicial.CargaInicialDetalhe.length === 0) {
//     const error = new Error(
//       'Nenhuma carga inicial foi fornecida. O processo não teve alteração',
//     );
//     error.name = 'CargaInicialError';
//     throw error;
//   }

//   const base = cargaInicial.CargaInicialDetalhe as CargaInicialDetalhe[];

//   const invalidItems: {
//     matricula: string;
//     campo: string;
//     valor: number;
//     mensagem: string;
//   }[] = [];

//   for (let i = 0; i < base.length; i++) {
//     const item = base[i];

//     if (
//       valor_parcela &&
//       (item.valor_parcela <= 0 || item.valor_parcela === null)
//     ) {
//       invalidItems.push({
//         matricula: item.matricula,
//         campo: 'valor_parcela',
//         valor: item.valor_parcela ?? 0,
//         mensagem: `Valores inválidos para matrícula ${
//           item.matricula
//         }. O campo ${'valor_parcela'} possui valor ${
//           item.valor_parcela ?? 0
//         }`,
//       });
//     }

//     if (
//       parcelaContrato &&
//       (item.parcelaContrato <= 0 || item.parcelaContrato === null)
//     ) {
//       invalidItems.push({
//         matricula: item.matricula,
//         campo: 'parcelaContrato',
//         valor: item.parcelaContrato ?? 0,
//         mensagem: `Valores inválidos para matrícula ${
//           item.matricula
//         }. O campo ${'parcelaContrato'} possui valor ${
//           item.parcelaContrato ?? 0
//         }`,
//       });
//     }

//     if (
//       prazo_contrato &&
//       (item.prazo_contrato <= 0 || item.prazo_contrato === null)
//     ) {
//       invalidItems.push({
//         matricula: item.matricula,
//         campo: 'prazo_contrato',
//         valor: item.prazo_contrato ?? 0,
//         mensagem: `Valores inválidos para matrícula ${
//           item.matricula
//         }. O campo ${'prazo_contrato'} possui valor ${
//           item.prazo_contrato ?? 0
//         }`,
//       });
//     }
//   }

//   if (invalidItems.length === 0) {
//     return [
//       'Nenhum item com valores inválidos. O processo não teve alteração',
//     ];
//   }

//   return invalidItems.map((invalidItem) => invalidItem.mensagem);
// }

// const consignatarias = await Promise.all(
//   base.map(async (item) => {
//     const newConsignacao = await this.prismaService.consignacao.findUnique({
//       where: {
//         id: item.consignacaoId,
//       },
//       select: {
//         consignatariaId: true,
//       },
//     });

//     return await this.prismaService.consignataria.findUnique({
//       where: {
//         id: newConsignacao?.consignatariaId,
//       },
//     });
//   }),
// );



  // async processarContrato(data: any[]): Promise<string> {

  // const batchSize = 50;
  // const totalLinhas = data.length;
  // let registrosProcessados = 0;
  // const errosProcessamento: string[] = [];

  // try {
  //   await this.prisma.$transaction(async (tx: PrismaTransaction) => {
  //     for (
  //       let startIndex = 0;
  //       startIndex < totalLinhas;
  //       startIndex += batchSize
  //     ) {
  //       const endIndex = Math.min(startIndex + batchSize, totalLinhas);
  //       const lote = data.slice(startIndex, endIndex);

  //       registrosProcessados = endIndex;
  //       console.log('Lote:', registrosProcessados);

  //       const errosLote = await this.createContratoBatch(lote, tx);

  //       errosProcessamento.push(...errosLote);
  //     }
  //   });

  //   const resultadoFinal = `Processamento concluído. ${registrosProcessados} registros processados com sucesso.`;

  //   if (errosProcessamento.length > 0) {
  //     const erroMessage = `${resultadoFinal}\nErros encontrados:\n${errosProcessamento.join(
  //       '\n',
  //     )}`;
  //     console.error(erroMessage);
  //     throw new Error(erroMessage);
  //   } else {
  //     return resultadoFinal;
  //   }
  // } catch (error) {
  //   console.error(`Erro durante a execução: ${error.message}`);
  //   throw error;
  // }
  // }



  // async atualizarConsignataria(empresaId: string): Promise<void> {
  //   try {
  //     const cargaInicialBaseToUpdate =
  //       await prisma.cargaInicialDetalhe.findMany({
  //         where: {
  //           consignatariaId: '0000',
  //         },
  //       });

  //     const consignatariasNaoEncontradas: string[] = [];

  //     for (const item of cargaInicialBaseToUpdate) {
  //       // Verificar se consignatariaId é '0000'
  //       if (item.consignatariaId === '0000') {
  //         const newConsignacao = await prisma.consignacao.findUnique({
  //           where: {
  //             codigo_empresaId: {
  //               codigo: item.consignacaoId,
  //               empresaId: empresaId,
  //             },
  //           },
  //           select: {
  //             consignatariaId: true,
  //           },
  //         });

  //         console.log('Consignataria:', newConsignacao);

  //         if (newConsignacao) {
  //           // Verificar se consignatariaId existe na tabela consignataria
  //           const consignatariaExistente =
  //             await prisma.consignataria.findUnique({
  //               where: {
  //                 id: newConsignacao.consignatariaId,
  //               },
  //             });

  //           if (consignatariaExistente) {
  //             // Atualize a cargaInicialBase com o resultado da consulta
  //             await prisma.cargaInicialDetalhe.update({
  //               where: {
  //                 id: item.id,
  //               },
  //               data: {
  //                 consignatariaId: newConsignacao.consignatariaId,
  //                 // Adicione outras atualizações necessárias aqui
  //               },
  //             });
  //           } else {
  //             // Se consignatariaId não existe, adicione à lista para inserção manual
  //             consignatariasNaoEncontradas.push(newConsignacao.consignatariaId);
  //           }
  //         }
  //       }
  //     }

  //     if (consignatariasNaoEncontradas.length > 0) {
  //       console.log(
  //         'Consignatarias não encontradas:',
  //         consignatariasNaoEncontradas,
  //       );
  //       console.log('Inserir manualmente na tabela consignataria.');
  //     }

  //     console.log('Atualização concluída com sucesso.');
  //   } catch (error) {
  //     console.error(`Erro durante a atualização: ${error.message}`);
  //   } finally {
  //     await prisma.$disconnect();
  //   }
  // }